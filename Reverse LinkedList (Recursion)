#include <iostream>
using namespace std;

class Node{
public:
int data;
Node* next;

Node(int x){    
this->data = x;
this->next = NULL;
}
};

class Pair{
public:
Node* head;
Node* tail;
};
Node* takeInput(){
int x;
cin>>x;
Node *head=NULL;
Node *temp;
while(x!=-1){
Node* newNode = new Node(x);
if(head == NULL){
head = newNode;
temp = newNode;
}
else{
temp->next = newNode;
temp = temp->next;
}
cin>>x;
}
return head;
}

void Display(Node* head){
while(head!=NULL){
cout<<head->data<<" ";
head = head->next;
}
cout<<endl;
}

//This Function is Reversing the LinkedList in O(n^2)
Node* reverseLL(Node* head){
if(head == NULL || head->next == NULL) return head;

Node* smallAns = reverseLL(head->next);
Node* temp = head;
while(temp->next!=NULL){
temp = temp->next;
}
temp->next = head;
head->next = NULL;

return smallAns;
}

//This function will return the Reverse LinkedList in better Time Complexity
Pair reverseLL_2(Node* head){
if(head == NULL || head->next == NULL){
Pair ans;
ans.head = head;
ans.tail = head;
return ans;
}
Pair smallAns = reverseLL_2(head->next);
smallAns.tail->next = head;
head->next = NULL;
Pair ans;
ans.head = smallAns.head;
ans.tail = head;
return ans;
}
//Reverse calling function    
Node* reverseLL_Better(Node* head){
return reverseLL_2(head).head;
}

int main(){
Node* head = takeInput();
Node* h = reverseLL_Better(head);
Display(h);
}

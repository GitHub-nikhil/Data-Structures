#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <cstring>
using namespace std;
//Cycle Detection in Directed Graph By DFS
bool cycleCheck(int node,vector<int> list[ ],vector<int> &visited,vector<int> &dfsVis,int n){
    visited[node] = 1;
    dfsVis[node] = 1;
    
    for(int i = 0;i<list[node].size();i++){
        int ele = list[node][i];
        if(!visited[ele]){
            if(cycleCheck(i,list,visited,dfsVis,n)) return true;
            }
            else if(dfsVis[ele]) return true;
        }
       
        dfsVis[node] = 0; 
        return false;
    }
bool dfs(vector<int> list[ ],vector<int> &visited,vector<int> &dfsVis,int n){
    for(int i = 1;i<=n;i++){
        if(!visited[i]){
            if(cycleCheck(i,list,visited,dfsVis,n)) return true;
            }
        }
        
        return false;
    }
int main(){
    int n,m;
    cin>>n>>m;
    vector<int> list[n+1];
    for(int i = 1;i<=m;i++){
        int u,v;
        cin>>u>>v;
        list[u].push_back(v);
        list[v].push_back(u);
        }
        vector<int> visited(n+1,0);
        vector<int> dfsVis(n+1,0);
        bool ans = dfs(list,visited,dfsVis,n);
        
        if(ans == true) cout<<"Cycle detected in Directed Graph"<<endl;
        else cout<<"Cycle not detected in Directed Graph"<<endl;
        
        return 0;
}

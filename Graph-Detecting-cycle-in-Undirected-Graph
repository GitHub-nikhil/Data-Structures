#include <iostream>
#include <vector>
#include <queue>
using namespace std;
//This function will return true if any point a node is visited and it is not equal
// to its parent node and if not found any node that will return false
bool checkCycle(int i,vector<int> list[ ],vector<int> &visited,int n){
    queue<pair<int,int>> q;
    q.push({i,-1});
    visited[i] = 1;
    
    while(!q.empty()){
        int curr = q.front().first;
        int par = q.front().second;
        q.pop();
        
        for(int j = 0;j<list[curr].size();j++){
            int ele = list[curr][j];
            if(!visited[ele]){
                visited[ele] = 1;
                q.push({ele,curr});
                }
                else if(ele!=par) return true;
            }
        }
        
        return false;
    }

bool bfs(vector<int> list[ ],vector<int> &visited,int n){
    for(int i = 1;i<=n;i++){
        if(!visited[i]){
            if(checkCycle(i,list,visited,n)) return true;
            }
        }
        return false;
    }
int main(){
    int n,m;
    cin>>n>>m;
    vector<int> list[n+1];
    for(int i = 1;i<=m;i++){
        int u,v;
        cin>>u>>v;
        list[u].push_back(v);
        list[v].push_back(u);
        }
        vector<int> visited(n+1,0);
        bool ans = bfs(list,visited,n);
        if(ans == true) cout<<"Graph contains a cycle"<<endl;
        else cout<<"Graph doesn't contains a cycle"<<endl;
        
        return 0;
    }

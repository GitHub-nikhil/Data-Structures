#include <iostream>
#include <stack>
#include <queue>
#include <algorithm>
using namespace std;

int n,m;
vector<vector<char> > vec(1001,vector<char> (1001));
vector<vector<char> > vis(1001,vector<char> (1001));
bool valid(int i,int j){
    if(i<0 || i>n-1 || j<0 || j>m-1) return false;
    if(vis[i][j] == 1) return false;
    
    return true;
    } 

void compo(int i,int j){
    vis[i][j] = 1;
    
    if(valid(i-1,j) && vec[i-1][j] == '.') compo(i-1,j);
    if(valid(i,j+1) && vec[i][j+1] == '.') compo(i,j+1);
    if(valid(i+1,j) && vec[i+1][j] == '.') compo(i+1,j);
    if(valid(i,j-1) && vec[i][j-1] == '.') compo(i,j-1);
    }
    
void dfs(int n,int m){
    int count = 0;
//    vector<vector<int> > vis(n,vector<int>(m,0));
    for(int i = 0;i<n;i++){
        for(int j = 0;j<m;j++){
            int ele=vec[i][j];
            if(!vis[i][j] && vec[i][j] == '.'){
                count++;
                compo(i,j);
                }
            }
        }
        
        cout<<count<<endl;
        
        return;
    }
int main(){
//    int n,m;
    cin>>n>>m;
//    vector<vector<char> > vec(n,vector<char> (m));
    
    for(int i = 0;i<n;i++){
//        string s;
//        cin>>s;
        for(int j = 0;j<m;j++){
//            char curr = s[j];
//            vec[i][j] = curr;
           cin>>vec[i][j];
            }
        }
        
        dfs(n,m);
        
        return 0;
    }

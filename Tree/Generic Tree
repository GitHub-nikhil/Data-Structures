#include <iostream>
#include <vector>
#include <queue>

using namespace std;
template<typename T>

class Treenode{
    public:
    T data;
    vector<Treenode<T>*> children;
    
    Treenode(T data){
        this->data = data;
        }
    };
    
                         
                         Treenode<int>* take_inputwise_input(){
                             int root_data;
                             cout<<"Enter the root data"<<endl;
                             cin>>root_data;
                             Treenode<int>* root = new Treenode<int>(root_data);
                             queue<Treenode<int>* > q;
                             q.push(root);
                             while(!q.empty()){
                                 Treenode<int>* front = q.front();
                                 q.pop();
                                 int numChild;
                                 cout<<"Enter the number of children of root"<<endl;
                                 cin>>numChild;
                                 for(int i = 0;i<numChild;i++){
                                     int child_data;
                                     cout<<"Enter the child data of "<<front->data<<" "<<endl;
                                     cin>>child_data;
                                 Treenode<int>* curr_child = new Treenode<int>(child_data);
                                 q.push(curr_child);
                                 front->children.push_back(curr_child);
                                     }
                                 }
                                 return root;
                             }
                     //Deleting the Tree
                     void DeleteTree(Treenode<int>* root){
                         for(int i = 0;i<root->children.size();i++){
                             DeleteTree(root->children[i]);
                             }
                             delete root;
                         }
           
           void print_tree(Treenode<int>* root){
               if(root == NULL) return; 
               cout<<root->data<<": ";
               for(int i = 0;i<root->children.size();i++){
                   cout<<root->children[i]->data<<",";
                   }
                   cout<<endl;
                   for(int i = 0;i<root->children.size();i++){
                       print_tree(root->children[i]);
                       }
               }
               
               int numNodes(Treenode<int>* root){
                   int sum = 1;
                   for(int i = 0;i<root->children.size();i++){
                       sum+=numNodes(root->children[i]);
                       }
                       
                       return sum;
                   }
                   
     int sum_of_all_nodes(Treenode<int>* root){
         int sum = root->data;
         for(int i = 0;i<root->children.size();i++){
             sum+=sum_of_all_nodes(root->children[i]);
             }
             
             return sum;
         }
         
         int max_weight(Treenode<int>* root){
             static int maxi = -1;
             maxi = max(maxi,root->data);
             for(int i = 0;i<root->children.size();i++){
                 int curr = root->children[i]->data;
                 maxi = max(curr,maxi);
                 }
                 for(int i = 0;i<root->children.size();i++){
                     max_weight(root->children[i]);
                     }
                     
                     return maxi;
             }
             
             int height_of_tree(Treenode<int>* root){
                 static int maxi = -1,height = 1;
                 int h = 1;
                 if(root->children.size() == 0){
                     maxi = max(maxi,height);
                     height = h;
                     }
                 for(int i = 0;i<root->children.size();i++){
                     cout<<height<<" "<<h<<endl;
                     height++;
                     h++;
                     maxi = max(maxi,height);
                     height_of_tree(root->children[i]);
                     }
                     return maxi;
                 }
                 
                 void printAtLevelK(Treenode<int>* root,int k){
                     if(root == NULL) return;
                     if(k == 0) cout<<root->data<<endl;
                     
                     for(int i = 0;i<root->children.size();i++){
                         printAtLevelK(root->children[i],k-1);
                         }
                         
                         return;
                     }
                     
                     //count leaf nodes
                     int countLeafNodes(Treenode<int>* root){
                         static int count = 0;
                         if(root == NULL) return 0;
                         
                         if(root->children.size() == 0) count++;
                         for(int i = 0;i<root->children.size();i++){
                             countLeafNodes(root->children[i]);
                             }
                             
                             return count;
                         }
                         
                         //Preorder Traversal
                         // 1 3 2 3 4 2 5 6 1 7 0 0 0 0
                         void preorder(Treenode<int>* root){
                             cout<<root->data<<" : ";
                             for(int i = 0;i<root->children.size();i++){
                                 cout<<root->children[i]->data<<" ";
                                 }
                                 cout<<endl;
                                 for(int i = 0;i<root->children.size();i++){
                                     preorder(root->children[i]);
                                     }
                             }
             
             //Postorder Traversal
             // 1 3 2 3 4 2 5 6 1 7 0 0 0 0
             void postorder(Treenode<int>* root){
                 for(int i = 0;i<root->children.size();i++){
                     postorder(root->children[i]);
                     }
                     cout<<root->data<<" ";
                 }
                 
                 //Inorder Traversal (probably inorder traversal sirf binary trees me lagti hai)
                 // 1 3 2 3 4 2 5 6 1 7 0 0 0 0
                 void inorder(Treenode<int>* root){
                     for(int i = 0;i<root->children.size();i++){
                         inorder(root->children[i]);
                         }
                     }
                     
                     int heightOfTree(Treenode<int>* root){
                         int height = 1;
                         static int ans;
                         for(int i = 0;i<root->children.size();i++){
                             height+=heightOfTree(root->children[i]);
                             ans = max(ans,height);
                             }
                             return ans;
                         }
                 
int main(){
    Treenode<int>* root = take_inputwise_input();
    int ans = heightOfTree(root);
    cout<<ans<<endl;
    DeleteTree(root); //this will delete thw whole tree
    
     return 0;
    }

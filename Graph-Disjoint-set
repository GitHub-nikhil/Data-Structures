#include <iostream>
using namespace std;
int parent[100000];
int ranks[100000];
void makeset(int n){
    for(int i = 1;i<=n;i++){
        ranks[i] = 0;
        parent[i] = i;
        }
    }
    
    int findPar(int node){
        if(parent[node] == node) return node;
        return parent[node] = findPar(parent[node]); //In this step we are also doing Path Compression(In Next Line)
        //Path Compression --> When several nodes are in one component , and if nodes present in this component 
        //does not have same parent , then this can increase the time complexity . So to counter this
        //We make a one parent for one component which ensures that when we will find Parent of particular node 
        //in an particular component , then it will be a constant search complexity to find the parent for that node
        }
        
    void unions(int u,int v){
        u = findPar(u);
        v = findPar(v);
        
        if(ranks[u]>ranks[v]){
            parent[v] = u;
            }
            else if(ranks[v]>ranks[u]){
                parent[u] = v;
                }
                else{
                    parent[v] = u;
                    ranks[u]++;
                    }
        }
int main(){
    int n,m;
    cin>>n>>m;
    makeset(n);
    
    while(m--){
        int u,v;
        cin>>u>>v;
        
        unions(u,v);
        }
        
        //What if we want to find out if 2 and 4 are connected (same parent)
        int q;
        cin>>q;
        while(q--){
            cout<<"Tell me the two elements"<<endl;
            int first,second;
            cin>>first>>second;
            
            if(findPar(first)!=findPar(second)){
                cout<<"Not Connected"<<endl;
                }
                else{
                    cout<<"Connected"<<endl;
                    }
            }
            
            
//            for(int i = 1;i<=n;i++){
//                cout<<parent[i]<<" "<<ranks[i]<<endl;
//                }
            return 0;
    }
